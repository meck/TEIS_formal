vunit simple_vhdl_cpu_formal (simple_vhdl_cpu(rtl))
{

  default clock is rising_edge(clk_50);

  -- The current op code
  signal f_op : std_logic_vector(3 downto 0);
  f_op <= ir(15 downto 12);

  -- The possible address part of the current instruction
  signal f_addr : std_logic_vector(7 downto 0);
  f_addr <= ir(7 downto 0);

  -- The possible data part in the register
  signal f_data : std_logic_vector(15 downto 0);
  f_data <= (15 downto 8 => '0') & cpu_reg_0(7 downto 0);

-- Initial reset, >1 cycle low, >1 cycle high
-- repeating
  initial_reset : assume {{not Reset_n[+]; Reset_n[+]}[+]};


  assume always next_state = Fetch_1_state or
                next_state = Fetch_2_state or
                next_state = Fetch_3_state or
                next_state = Decode_state or
                next_state = Execute_NOP_state or
                next_state = Execute_JMP_state or
                next_state = Execute_LOAD_state or
                next_state = Execute_STORE_state or
                next_state = STORE_1_state or
                next_state = STORE_2_state;

  -- All FSM operations is one cycle long
  state_change_every_cycle : assert always reset_n ->
      next next_state /= prev(next_state) abort not reset_n;


  -- writes are only one cycle.
  we_only_one_cycle : assert always not we_n -> next we_n;

  -- check that we are in the correct state when writing
  we_only_in_write_state : assert always reset_n and fell(we_n) -> prev(next_state) = STORE_1_state;

  -- check output are correct when writing
  write_addr_from_ir : assert not we_n -> addr_bus = f_addr;
  write_value_from_cpu_reg : assert not we_n -> data_bus_out = f_data;

  -- Cover statement
  load_store_cycle : cover { (cpu_reg_0 /= X"0AFE");
                             (cpu_reg_0 = X"0AFE")[->];
                             (data_bus_out = X"00FE" and we_n = '0')[->]
                           };

  }
